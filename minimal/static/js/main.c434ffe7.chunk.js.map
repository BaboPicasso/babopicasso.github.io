{"version":3,"sources":["Components/NavBar.js","Components/Settings.js","Components/Calibration.js","Components/Evaluation.js","Components/Landing.js","Reducers/appReducer.js","Components/Footer.js","Components/Loader.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","state","useSelector","handleDisable","action","availableSensors","gyroscope","calibration","measurements","length","react_default","a","createElement","AppBar","position","Toolbar","Icon","style","paddingRight","Typography","variant","Tabs","value","location","pathname","scrollButtons","Tab","component","Link","label","to","disabled","Settings","align","FormControl","FormLabel","RadioGroup","FormControlLabel","checked","control","Radio","Divider","margin","color","gutterBottom","Slider","defaultValue","step","max","min","valueLabelDisplay","Calibration","justifyContent","display","ButtonGroup","Button","TextField","multiline","fullWidth","rows","Table","TableHead","TableRow","TableCell","Evaluation","size","Landing","handleDeviceOrientation","event","console","log","useEffect","window","addEventListener","removeEventListener","lib_default","Provider","Node","formula","inline","List","ListItem","ListItemText","initialState","supported","measuring","accelerometer","settings","sensorType","duration","delay","evaluation","useStyles","makeStyles","theme","footer","bottom","backgroundColor","palette","grey","text","secondary","disclaimer","copyright","padding","fontSize","Footer","classes","className","Container","href","root","height","width","top","left","zIndex","alignItems","overflow","transform","borderRadius","transition","opacity","active","Loader","CircularProgress","thickness","store","createStore","arguments","undefined","Object","objectSpread","payload","push","measurement","App","_React$useState","React","useState","_React$useState2","slicedToArray","loader","setLoader","react_router_dom","flexDirection","minHeight","es","Components_NavBar","Components_Loader","paddingTop","flexGrow","onClick","react_router","path","exact","Components_Footer","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c434ffe7.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport {Link, withRouter} from 'react-router-dom';\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nconst NavBar = (props) => {\r\n    const state = useSelector(state => state);\r\n\r\n\r\n    const handleDisable = (action) => {\r\n        switch(action) {\r\n            case 'calibration':\r\n                if(state.availableSensors.gyroscope || state.availableSensors.gyroscope) return false;\r\n                return true;\r\n            case 'evaluation':\r\n                if(state.calibration.measurements.length > 1) return false;\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <AppBar position={\"sticky\"}>\r\n            <Toolbar>\r\n                <Icon style={{paddingRight: 12}}>\r\n                    3d_rotation\r\n                </Icon>\r\n                <Typography variant={\"h6\"}>\r\n                    Trägheitsmoment App\r\n                </Typography>\r\n            </Toolbar>\r\n            <Tabs variant=\"scrollable\" value={props.location.pathname} scrollButtons={'on'}>\r\n                <Tab\r\n                    component={Link}\r\n                    label={\"Start\"}\r\n                    to={'/'}\r\n                    value={'/'}\r\n                />\r\n                <Tab\r\n                    component={Link}\r\n                    label={\"Einstellung\"}\r\n                    to={'/settings'}\r\n                    value={'/settings'}\r\n                />\r\n                <Tab\r\n                    component={Link}\r\n                    label={\"Kalibrierung\"}\r\n                    to={'/calibration'}\r\n                    value={'/calibration'}\r\n                    disabled={handleDisable('calibration')}\r\n                />\r\n                <Tab\r\n                    component={Link}\r\n                    label={\"Bestimmung\"}\r\n                    to={'/evaluation'}\r\n                    value={'/evaluation'}\r\n                    disabled={handleDisable('evaluation')}\r\n                />\r\n            </Tabs>\r\n        </AppBar>\r\n    )\r\n};\r\n\r\nexport default withRouter(NavBar);\r\n","import React from 'react';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Slider from '@material-ui/lab/Slider'\r\n\r\nconst Settings = (props) => {\r\n    return (\r\n        <div>\r\n            <Typography variant={\"body1\"} component={\"p\"} align={\"justify\"}>\r\n                Wählen Sie hier bitte ihren gewünschten Sensor aus, sollte einer ausgegraut sein so kann nur der andere Sensor benutzt werden.\r\n            </Typography>\r\n            <br />\r\n            <FormControl>\r\n                <FormLabel>Sensor</FormLabel>\r\n                <RadioGroup>\r\n                    <FormControlLabel value={\"gyroscope\"} checked control={<Radio />} label={\"Gyroskop\"}/>\r\n                    <FormControlLabel value={\"accelerometer\"} disabled control={<Radio />} label={\"Beschleunigungssensor\"}/>\r\n                </RadioGroup>\r\n            </FormControl>\r\n            <Divider style={{margin: \"18px 0 18px 0\"}}/>\r\n            <Typography variant={\"body1\"} component={\"p\"} align={\"justify\"}>\r\n                Hier können Sie die Messdauer und Messverzögerung einstellen.\r\n            </Typography>\r\n            <br />\r\n            <Typography variant={\"body1\"} component={\"p\"} color={\"textSecondary\"} align={\"justify\"} gutterBottom>\r\n                Messdauer in Sekunden\r\n            </Typography>\r\n            <Slider\r\n                defaultValue={30}\r\n                step={5}\r\n                max={120}\r\n                min={10}\r\n                valueLabelDisplay={\"auto\"}\r\n            />\r\n            <Typography variant={\"body1\"} component={\"p\"} color={\"textSecondary\"} align={\"justify\"} gutterBottom>\r\n                Messverzögerung in Sekunden\r\n            </Typography>\r\n            <Slider\r\n                defaultValue={2}\r\n                step={1}\r\n                max={10}\r\n                min={0}\r\n                valueLabelDisplay={\"auto\"}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Settings;\r\n","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst Calibration = (props) => {\r\n    return (\r\n        <div>\r\n            <Typography variant={\"body1\"} component={\"div\"} align={\"justify\"} gutterBottom>\r\n                Führen Sie nacheinander die 2 Kalibrierungsmessungen durch, beachten Sie dabei die erwähnten Richtlinien. Geben Sie bitte auch das bekannte Trägheitsmoment in das Textfeld ein.\r\n            </Typography>\r\n            <br />\r\n            <div style={{justifyContent: \"center\", display: \"flex\"}}>\r\n                <ButtonGroup color={\"primary\"} variant={\"contained\"}>\r\n                    <Button>\r\n                        Messung 1\r\n                    </Button>\r\n                    <Button disabled>\r\n                        Messung 2\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n            <br />\r\n            <TextField\r\n                label={\"Bekanntes Trägheitsmoment\"}\r\n                multiline\r\n                fullWidth\r\n                rows={1}\r\n            />\r\n            <br />\r\n            <br />\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Messung</TableCell>\r\n                        <TableCell>T in s</TableCell>\r\n                        <TableCell>f in Hz</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell>1</TableCell>\r\n                        <TableCell>...</TableCell>\r\n                        <TableCell>...</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell>2</TableCell>\r\n                        <TableCell>...</TableCell>\r\n                        <TableCell>...</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n            </Table>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Calibration;\r\n","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\n\r\nconst Evaluation = (props) => {\r\n    return (\r\n        <div>\r\n            <Typography variant={\"body1\"} gutterBottom align={\"justify\"}>\r\n                Hier können Sie das Trägheitsmoment nach erfolgter Messung berechnen. Dafür müssen Sie nur noch das Bekannte Trägheitsmoment eintragen.\r\n            </Typography>\r\n            <br />\r\n            <div style={{justifyContent: \"center\", display: \"flex\"}}>\r\n                <Button color={\"primary\"} variant={\"contained\"}>\r\n                    Trägheitsmoment messen\r\n                </Button>\r\n            </div>\r\n            <br />\r\n            <Table size={\"small\"}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Messung</TableCell>\r\n                        <TableCell>T in s</TableCell>\r\n                        <TableCell>f in Hz</TableCell>\r\n                        <TableCell>J in Nm</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell>1</TableCell>\r\n                        <TableCell>4.23423</TableCell>\r\n                        <TableCell>0.2342</TableCell>\r\n                        <TableCell>0.022</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n            </Table>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Evaluation;\r\n","import React, {useEffect} from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MathJax from 'react-mathjax';\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nconst Landing = (props) => {\r\n    const handleDeviceOrientation = (event) => {\r\n        console.log(event);\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('deviceorientation', (event) => handleDeviceOrientation(event), false);\r\n        return (window.removeEventListener('deviceorientation', (event) => handleDeviceOrientation(event), false));\r\n    });\r\n\r\n    return (\r\n        <MathJax.Provider>\r\n            <Typography variant={\"body1\"} component={\"div\"} align={\"justify\"}>\r\n                Bitte lesen Sie sich alle Reiter durch und arbeiten diese ab. Um die Bestimmung des Trägheitsmomentes\r\n                durchführen zu können müssen Sie zuerst die Kalibrierung durchführen.\r\n            </Typography>\r\n            <br />\r\n            <Divider />\r\n            <br />\r\n            <Typography variant={\"body1\"} component={\"div\"} align={\"justify\"}>\r\n                Die dieser App zugrundliegende Formel für die Bestimmung des Trägheitsmomentes lautet:\r\n                <MathJax.Node formula={\"J_x = J_1 \\\\cdot \\\\frac{T_x^2-T_0^2}{T_1^2-T_0^2}\"} />\r\n            </Typography>\r\n            <Typography variant={\"body1\"} component={\"div\"} align={\"justify\"}>\r\n                Um das Trägheitsmoment <MathJax.Node inline formula={\"J_x\"} /> zu bestimmen müssen 3 Messungen durchgeführt werden:\r\n                <List>\r\n                    <ListItem>\r\n                        <ListItemText>\r\n                            <MathJax.Node inline formula={\"T_0\"} />: wird nur mit dem Smartphone auf dem Drehteller durchgeführt.\r\n                        </ListItemText>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ListItemText>\r\n                            <MathJax.Node inline formula={\"T_1\"} />: wiederum mit einem Objekt dessen Trägheitsmoment um die gewünschte Achse bekannt ist.\r\n                        </ListItemText>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ListItemText>\r\n                            <MathJax.Node inline formula={\"T_x\"} />: wird mit einem beliebigen Körper dessen Trägheitsmoment bestimmt werden soll durchgeführt.\r\n                        </ListItemText>\r\n                    </ListItem>\r\n                </List>\r\n            </Typography>\r\n        </MathJax.Provider>\r\n    )\r\n};\r\n\r\nexport default Landing;\r\n","const initialState = {\r\n    supported: true,\r\n    measuring: false,\r\n    availableSensors:{\r\n        gyroscope: false,\r\n        accelerometer: false,\r\n    },\r\n    settings: {\r\n        sensorType: null,\r\n        duration: null,\r\n        delay: null,\r\n    },\r\n    calibration: {\r\n        measurements: [],\r\n    },\r\n    evaluation: {\r\n        measurements: [],\r\n    }\r\n};\r\n\r\nexport default function appReducer(state = initialState, action) {\r\n    switch(action) {\r\n        case \"AVAILABLE_SENSORS\":\r\n            return {\r\n                ...state,\r\n                availableSensors: {\r\n                    gyroscope: action.payload.gyroscope,\r\n                    accelerometer: action.payload.accelerometer,\r\n                }\r\n            };\r\n        case \"SETTING\":\r\n            return {\r\n                ...state,\r\n                settings: {\r\n                    sensorType: action.payload.sensorType,\r\n                    duration: action.payload.duration,\r\n                    delay: action.payload.delay,\r\n                }\r\n            };\r\n        case \"CALIBRATION\":\r\n            return {\r\n                ...state,\r\n                calibration: {\r\n                    measurements: action.payload.measurements\r\n                }\r\n            };\r\n        case \"EVALUATION\":\r\n            return {\r\n                ...state,\r\n                evaluation: state.evaluation.push(action.payload.measurement)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    footer: {\r\n        bottom: 0,\r\n        backgroundColor: theme.palette.grey[300],\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    disclaimer: {\r\n        backgroundColor: theme.palette.grey[200]\r\n    },\r\n    copyright: {\r\n        padding: 6,\r\n        fontSize: 10,\r\n    }\r\n}));\r\n\r\nconst Footer = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <footer className={classes.footer}>\r\n            <div className={classes.disclaimer}>\r\n                <Container>\r\n                    <Typography variant={\"body2\"} style={{padding: \"12px 0 12px 0\"}}>\r\n                        Sollten Sie Fragen haben wenden Sie sich bitte an <a href={\"mailto:tganzhorn@gmail.com\"}>tganzhorn@gmail.com</a>.\r\n                    </Typography>\r\n                </Container>\r\n            </div>\r\n            <Typography variant={\"body2\"} className={classes.copyright}>\r\n                <Icon style={{fontSize: 8}}>copyright</Icon>Tobias Ganzhorn, 2019\r\n            </Typography>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        position: \"fixed\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        top: 0,\r\n        left: 0,\r\n        backgroundColor: \"rgba(0, 0, 0, 0.2)\",\r\n        zIndex: 1300,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        overflow: \"hidden\",\r\n        transform: \"scaleX(0) scaleY(0)\",\r\n        borderRadius: \"100%\",\r\n        transition: \"all 0.2s ease\",\r\n        opacity: 0,\r\n    },\r\n    active: {\r\n        transform: \"scaleX(1) scaleY(1)\",\r\n        borderRadius: \"0\",\r\n        opacity: 1\r\n    }\r\n}));\r\n\r\nconst Loader = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root + \" \" + (props.active ? classes.active : \"\")}>\r\n            <CircularProgress color={\"secondary\"} size={100} thickness={2} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Loader;\r\n","import React from 'react';\nimport NavBar from \"./Components/NavBar\";\nimport {HashRouter as Router, Route} from \"react-router-dom\";\nimport Settings from './Components/Settings';\nimport Calibration from './Components/Calibration';\nimport Evaluation from './Components/Evaluation';\nimport Landing from './Components/Landing';\nimport Container from \"@material-ui/core/Container\";\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport appReducer from './Reducers/appReducer';\nimport Footer from \"./Components/Footer\";\nimport Loader from \"./Components/Loader\";\n\nconst store = createStore(appReducer);\n\nconst App = () => {\n    const [loader, setLoader] = React.useState(false);\n\n    return (\n        <Router>\n            <div style={{display: \"flex\", flexDirection: \"column\", minHeight: \"100vh\"}}>\n                <Provider store={store}>\n                    <NavBar />\n                    <Loader active={loader} />\n                    <Container style={{paddingTop: \"18px\", flexGrow: 1}} onClick={() => setLoader(true)}>\n                      <Route path={'/'} exact component={Landing} />\n                      <Route path={'/settings'} exact component={Settings} />\n                      <Route path={'/calibration'} exact component={Calibration} />\n                      <Route path={'/evaluation'} exact component={Evaluation} />\n                    </Container>\n                </Provider>\n                <Footer/>\n            </div>\n        </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}