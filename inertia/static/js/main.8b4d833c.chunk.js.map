{"version":3,"sources":["Components/NavBar.js","Components/Settings.js","Functions/Measure.js","Components/Calibration.js","Components/Evaluation.js","Components/Landing.js","Reducers/appReducer.js","Components/Loader.js","Components/Unsupported.js","Functions/CheckSupport.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","state","useSelector","handleDisable","action","availableSensors","gyroscope","calibration","measurement1","measurement2","inertia","react_default","a","createElement","AppBar","position","Toolbar","Icon","style","paddingRight","Typography","variant","Tabs","value","location","pathname","scrollButtons","Tab","component","Link","label","to","disabled","Settings","dispatch","useDispatch","sensorType","settings","align","FormControl","FormLabel","RadioGroup","onChange","event","type","payload","handleSensorTypeChange","FormControlLabel","control","Radio","accelerometer","Divider","margin","color","gutterBottom","Slider","defaultValue","step","max","min","valueLabelDisplay","duration","parseInt","target","textContent","handleDurationChange","delay","handleDelayChange","Measure","sensor","handle","finished","analyseData","measurement","console","log","window","removeEventListener","handleMeasurement","x","y","z","timeStamp","T","data","time","temp","i","length","push","zero","direction","Math","sign","deltaT","acceleration","rotationRate","alpha","beta","gamma","setTimeout","startMeasurement","addEventListener","clearTimeout","Calibration","calibrationMeasurement1","calibrationMeasurement2","handleCalibration","index","sendCalibration1ToStore","sendCalibration2ToStore","justifyContent","display","ButtonGroup","Button","onClick","TextField","multiline","fullWidth","rows","handleInertia","Table","TableHead","TableRow","TableCell","key","round","Evaluation","measurements","evaluation","storeMeasurement","size","map","parseFloat","Landing","lib_default","Provider","Node","formula","inline","List","ListItem","ListItemText","initialState","measuring","useStyles","makeStyles","theme","root","height","width","top","left","backgroundColor","zIndex","alignItems","overflow","transform","transition","opacity","active","Loader","classes","useEffect","className","CircularProgress","thickness","Unsupported","supported","support","check","Modal","open","padding","borderRadius","store","createStore","arguments","undefined","Object","objectSpread","concat","toConsumableArray","mapStyles","styles","scale","bounce","val","spring","stiffness","damping","bounceTransition","atEnter","atLeave","atActive","App","react_router","flexDirection","minHeight","es","Components_NavBar","Components_Loader","Components_Unsupported","Container","paddingTop","react_router_transition_es","path","exact","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b4d833c.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport {Link, withRouter} from 'react-router-dom';\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nconst NavBar = (props) => {\r\n    const state = useSelector(state => state);\r\n\r\n    const handleDisable = (action) => {\r\n        switch(action) {\r\n            case 'calibration':\r\n                if(state.availableSensors.gyroscope || state.availableSensors.gyroscope) return false;\r\n                return true;\r\n            case 'evaluation':\r\n                if(state.calibration.measurement1 !== null && state.calibration.measurement2 !== null && state.calibration.inertia !== \"\") return false;\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <AppBar position={\"sticky\"}>\r\n            <Toolbar>\r\n                <Icon style={{paddingRight: 12}}>\r\n                    3d_rotation\r\n                </Icon>\r\n                <Typography variant={\"h6\"}>\r\n                    Trägheitsmoment App\r\n                </Typography>\r\n            </Toolbar>\r\n            <Tabs variant=\"scrollable\" value={props.location.pathname} scrollButtons={'on'}>\r\n                <Tab\r\n                    component={Link}\r\n                    label={\"Start\"}\r\n                    to={'/'}\r\n                    value={'/'}\r\n                />\r\n                <Tab\r\n                    component={Link}\r\n                    label={\"Einstellung\"}\r\n                    to={'/settings'}\r\n                    value={'/settings'}\r\n                />\r\n                <Tab\r\n                    component={Link}\r\n                    label={\"Kalibrierung\"}\r\n                    to={'/calibration'}\r\n                    value={'/calibration'}\r\n                    disabled={handleDisable('calibration')}\r\n                />\r\n                <Tab\r\n                    component={Link}\r\n                    label={\"Bestimmung\"}\r\n                    to={'/evaluation'}\r\n                    value={'/evaluation'}\r\n                    disabled={handleDisable('evaluation')}\r\n                />\r\n            </Tabs>\r\n        </AppBar>\r\n    )\r\n};\r\n\r\nexport default withRouter(NavBar);\r\n","import React from 'react';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Slider from '@material-ui/lab/Slider'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nconst Settings = (props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const availableSensors = useSelector(state => state.availableSensors);\r\n    const sensorType = useSelector(state => state.settings.sensorType);\r\n\r\n    const handleDurationChange = (event) => {\r\n        dispatch({type: \"DURATION\", payload: {duration: parseInt(event.target.textContent) * 1000}});\r\n    };\r\n\r\n    const handleDelayChange = (event) => {\r\n        dispatch({type: \"DELAY\", payload: {delay: parseInt(event.target.textContent) * 1000}});\r\n    };\r\n\r\n    const handleSensorTypeChange = (event, value) => {\r\n        dispatch({type: \"SENSORTYPE\", payload: {sensorType: value}});\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant={\"body1\"} component={\"p\"} align={\"justify\"}>\r\n                Wählen Sie hier bitte ihren gewünschten Sensor aus, sollte einer ausgegraut sein so kann nur der andere Sensor benutzt werden.\r\n            </Typography>\r\n            <br />\r\n            <FormControl>\r\n                <FormLabel>Sensor</FormLabel>\r\n                <RadioGroup onChange={(event, value) => handleSensorTypeChange(event, value)} value={sensorType}>\r\n                    <FormControlLabel value={\"gyroscope\"} disabled={!availableSensors.gyroscope} control={<Radio />} label={\"Gyroskop\"} />\r\n                    <FormControlLabel value={\"accelerometer\"} disabled={!availableSensors.accelerometer} control={<Radio />} label={\"Beschleunigungssensor\"} />\r\n                </RadioGroup>\r\n            </FormControl>\r\n            <Divider style={{margin: \"18px 0 18px 0\"}}/>\r\n            <Typography variant={\"body1\"} component={\"p\"} align={\"justify\"}>\r\n                Hier können Sie die Messdauer und Messverzögerung einstellen.\r\n            </Typography>\r\n            <br />\r\n            <Typography variant={\"body1\"} component={\"p\"} color={\"textSecondary\"} align={\"justify\"} gutterBottom>\r\n                Messdauer in Sekunden\r\n            </Typography>\r\n            <Slider\r\n                defaultValue={30}\r\n                step={5}\r\n                max={120}\r\n                min={10}\r\n                valueLabelDisplay={\"auto\"}\r\n                onChange={event => handleDurationChange(event)}\r\n            />\r\n            <Typography variant={\"body1\"} component={\"p\"} color={\"textSecondary\"} align={\"justify\"} gutterBottom>\r\n                Messverzögerung in Sekunden\r\n            </Typography>\r\n            <Slider\r\n                defaultValue={2}\r\n                step={1}\r\n                max={10}\r\n                min={0}\r\n                valueLabelDisplay={\"auto\"}\r\n                onChange={(event) => handleDelayChange(event)}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Settings;\r\n","const Measure = (duration, delay, sensor, handle) => {\r\n\r\n    const finished = () => {\r\n        analyseData();\r\n        handle(measurement);\r\n        console.log(\"done\");\r\n        window.removeEventListener('devicemotion', handleMeasurement, false);\r\n    };\r\n\r\n    const measurement = {\r\n        x: [],\r\n        y: [],\r\n        z: [],\r\n        timeStamp: [],\r\n        T: null,\r\n    };\r\n\r\n    const analyseData = () => {\r\n        let data = measurement.z;\r\n        let time = measurement.timeStamp;\r\n\r\n        if(sensor === 'accelerometer') {\r\n            let temp = [];\r\n            for(let i = 0; i < measurement.x.length; i++) {\r\n                temp.push(measurement.x[i] + measurement.y[i]);\r\n            }\r\n            data = temp;\r\n        }\r\n\r\n        let zero = [];\r\n        let direction = Math.sign(data[0]);\r\n\r\n        for(let i = 1; i < data.length; i++) {\r\n            if(direction !== Math.sign(data[i])) {\r\n                zero.push(time[i] / 1000);\r\n                direction *= -1;\r\n            }\r\n        }\r\n\r\n        let deltaT = 0;\r\n\r\n        for(let i = 0; i < zero.length - 1; i++) {\r\n            deltaT += zero[i + 1] - zero[i];\r\n        }\r\n\r\n        deltaT = deltaT / (zero.length - 1) * 2;\r\n\r\n        measurement.T = deltaT;\r\n    };\r\n\r\n    const handleMeasurement = (event) => {\r\n        if(sensor === 'accelerometer') {\r\n            measurement.x.push(event.acceleration.x);\r\n            measurement.y.push(event.acceleration.y);\r\n            measurement.z.push(event.acceleration.z);\r\n        }\r\n\r\n        if(sensor === 'gyroscope') {\r\n            measurement.x.push(event.rotationRate.alpha);\r\n            measurement.y.push(event.rotationRate.beta);\r\n            measurement.z.push(event.rotationRate.gamma);\r\n        }\r\n\r\n        measurement.timeStamp.push(event.timeStamp);\r\n    };\r\n\r\n    const startMeasurement = () => {\r\n        window.addEventListener('devicemotion', handleMeasurement);\r\n        window.setTimeout(finished, duration);\r\n        window.clearTimeout(startMeasurement);\r\n    };\r\n\r\n    window.setTimeout(startMeasurement, delay);\r\n};\r\n\r\nexport {Measure};\r\n","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Measure} from \"../Functions/Measure\";\r\n\r\nconst Calibration = (props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const inertia = useSelector(state => state.calibration.inertia);\r\n    const duration = useSelector(state => state.settings.duration);\r\n    const delay = useSelector(state => state.settings.delay);\r\n    const sensorType = useSelector(state => state.settings.sensorType);\r\n    const calibrationMeasurement1 = useSelector(state => state.calibration.measurement1);\r\n    const calibrationMeasurement2 = useSelector(state => state.calibration.measurement2);\r\n\r\n    const handleInertia = (event) => {\r\n        dispatch({type: \"INERTIA\", payload: {inertia: event.target.value}});\r\n    };\r\n\r\n    const handleCalibration = (index) => {\r\n        if(index === 1) Measure(duration, delay, sensorType, sendCalibration1ToStore);\r\n        if(index === 2) Measure(duration, delay, sensorType, sendCalibration2ToStore);\r\n        dispatch({type: \"MEASURING\"});\r\n    };\r\n\r\n    const sendCalibration1ToStore = (measurement) => {\r\n        dispatch({type: \"CALIBRATION1\" , payload: {measurement: measurement}});\r\n        dispatch({type: \"MEASURING\"});\r\n    };\r\n\r\n    const sendCalibration2ToStore = (measurement) => {\r\n        dispatch({type: \"CALIBRATION2\" , payload: {measurement: measurement}});\r\n        dispatch({type: \"MEASURING\"});\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant={\"body1\"} component={\"div\"} align={\"justify\"} gutterBottom>\r\n                Führen Sie nacheinander die 2 Kalibrierungsmessungen durch, beachten Sie dabei die erwähnten Richtlinien. Geben Sie bitte auch das bekannte Trägheitsmoment in das Textfeld ein.\r\n            </Typography>\r\n            <br />\r\n            <div style={{justifyContent: \"center\", display: \"flex\"}}>\r\n                <ButtonGroup color={\"primary\"} variant={\"contained\"}>\r\n                    <Button onClick={() => handleCalibration(1)}>\r\n                        Messung 1\r\n                    </Button>\r\n                    <Button onClick={() => handleCalibration(2)} disabled={calibrationMeasurement1 === null}>\r\n                        Messung 2\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n            <br />\r\n            <TextField\r\n                label={\"Bekanntes Trägheitsmoment\"}\r\n                multiline\r\n                fullWidth\r\n                rows={1}\r\n                onChange={(event) => handleInertia(event)}\r\n                value={inertia}\r\n            />\r\n            <br />\r\n            <br />\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Messung</TableCell>\r\n                        <TableCell>T in s</TableCell>\r\n                        <TableCell>f in Hz</TableCell>\r\n                    </TableRow>\r\n                        {(calibrationMeasurement1 === null) ? \"\" : (<TableRow key={1}>\r\n                        <TableCell>1</TableCell>\r\n                        <TableCell>{Math.round(calibrationMeasurement1.T * 1000) / 1000}</TableCell>\r\n                        <TableCell>{Math.round(1 / calibrationMeasurement1.T * 1000) / 1000}</TableCell>\r\n                    </TableRow>)}\r\n                    {(calibrationMeasurement2 === null) ? \"\" : (<TableRow key={2}>\r\n                        <TableCell>2</TableCell>\r\n                        <TableCell>{Math.round(calibrationMeasurement2.T * 1000) / 1000}</TableCell>\r\n                        <TableCell>{Math.round(1 / calibrationMeasurement2.T * 1000) / 1000}</TableCell>\r\n                    </TableRow>)}\r\n                </TableHead>\r\n            </Table>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Calibration;\r\n","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Measure} from \"../Functions/Measure\";\r\n\r\nconst Evaluation = (props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const measurements = useSelector(state => state.evaluation.measurements);\r\n    const settings = useSelector(state => state.settings);\r\n    const calibration = useSelector(state => state.calibration);\r\n\r\n    console.log(measurements);\r\n\r\n    const handleMeasurement = () => {\r\n        Measure(settings.duration, settings.delay, settings.sensorType, storeMeasurement);\r\n        dispatch({type: \"MEASURING\"});\r\n    };\r\n\r\n    const storeMeasurement = (measurement) => {\r\n        dispatch({type: \"EVALUATION\", payload: {measurement: measurement}});\r\n        dispatch({type: \"MEASURING\"});\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant={\"body1\"} gutterBottom align={\"justify\"}>\r\n                Hier können Sie das Trägheitsmoment nach erfolgter Messung berechnen. Dafür müssen Sie nur noch das Bekannte Trägheitsmoment eintragen.\r\n            </Typography>\r\n            <br />\r\n            <div style={{justifyContent: \"center\", display: \"flex\"}}>\r\n                <Button color={\"primary\"} variant={\"contained\"} onClick={() => handleMeasurement()}>\r\n                    Trägheitsmoment messen\r\n                </Button>\r\n            </div>\r\n            <br />\r\n            <Table size={\"small\"}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Messung</TableCell>\r\n                        <TableCell>T in s</TableCell>\r\n                        <TableCell>f in Hz</TableCell>\r\n                        <TableCell>J in Nm</TableCell>\r\n                    </TableRow>\r\n                    {\r\n                        measurements.map((x, index) => (\r\n                            <TableRow key={index}>\r\n                                <TableCell>{index}</TableCell>\r\n                                <TableCell>{Math.round(x.T * 1000) / 1000}</TableCell>\r\n                                <TableCell>{Math.round(1 / x.T * 1000) / 1000}</TableCell>\r\n                                <TableCell>{Math.round(\r\n                                    parseFloat(calibration.inertia) *\r\n                                    (x.T * x.T - calibration.measurement1.T * calibration.measurement1.T)\r\n                                    / (calibration.measurement2.T * calibration.measurement2.T - calibration.measurement1.T * calibration.measurement1.T) * 1000000\r\n                                ) / 1000000}</TableCell>\r\n                            </TableRow>\r\n                            )\r\n                        )\r\n                    }\r\n                </TableHead>\r\n            </Table>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Evaluation;\r\n","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MathJax from 'react-mathjax';\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst Landing = (props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <MathJax.Provider>\r\n            <Typography variant={\"body1\"} component={\"div\"} align={\"justify\"} onClick={() => dispatch({type: \"MEASURING\"})}>\r\n                Bitte lesen Sie sich alle Reiter durch und arbeiten diese ab. Um die Bestimmung des Trägheitsmomentes\r\n                durchführen zu können müssen Sie zuerst die Kalibrierung durchführen.\r\n            </Typography>\r\n            <br />\r\n            <Divider />\r\n            <br />\r\n            <Typography variant={\"body1\"} component={\"div\"} align={\"justify\"}>\r\n                Die dieser App zugrundliegende Formel für die Bestimmung des Trägheitsmomentes lautet:\r\n                <MathJax.Node formula={\"J_x = J_1 \\\\cdot \\\\frac{T_x^2-T_0^2}{T_1^2-T_0^2}\"} />\r\n            </Typography>\r\n            <Typography variant={\"body1\"} component={\"div\"} align={\"justify\"}>\r\n                Um das Trägheitsmoment <MathJax.Node inline formula={\"J_x\"} /> zu bestimmen müssen 3 Messungen durchgeführt werden:\r\n                <List>\r\n                    <ListItem>\r\n                        <ListItemText>\r\n                            <MathJax.Node inline formula={\"T_0\"} />: wird nur mit dem Smartphone auf dem Drehteller durchgeführt.\r\n                        </ListItemText>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ListItemText>\r\n                            <MathJax.Node inline formula={\"T_1\"} />: wiederum mit einem Objekt dessen Trägheitsmoment um die gewünschte Achse bekannt ist.\r\n                        </ListItemText>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ListItemText>\r\n                            <MathJax.Node inline formula={\"T_x\"} />: wird mit einem beliebigen Körper dessen Trägheitsmoment bestimmt werden soll durchgeführt.\r\n                        </ListItemText>\r\n                    </ListItem>\r\n                </List>\r\n            </Typography>\r\n        </MathJax.Provider>\r\n    )\r\n};\r\n\r\nexport default Landing;\r\n","const initialState = {\r\n    measuring: false,\r\n    availableSensors:{\r\n        gyroscope: true,\r\n        accelerometer: true,\r\n    },\r\n    settings: {\r\n        sensorType: null,\r\n        duration: 30000,\r\n        delay: 2000,\r\n    },\r\n    calibration: {\r\n        inertia: \"\",\r\n        measurement1: null,\r\n        measurement2: null,\r\n    },\r\n    evaluation: {\r\n        measurements: [],\r\n    }\r\n};\r\n\r\nexport default function appReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case \"AVAILABLE_SENSORS\":\r\n            return {\r\n                ...state,\r\n                availableSensors: {\r\n                    gyroscope: action.payload.gyroscope,\r\n                    accelerometer: action.payload.accelerometer,\r\n                }\r\n            };\r\n        case \"DURATION\":\r\n            return {\r\n                ...state,\r\n                settings: {\r\n                    ...state.settings,\r\n                    duration: action.payload.duration,\r\n                }\r\n            };\r\n        case \"DELAY\":\r\n            return {\r\n                ...state,\r\n                settings: {\r\n                    ...state.settings,\r\n                    delay: action.payload.delay,\r\n                }\r\n            };\r\n        case \"SENSORTYPE\":\r\n            return {\r\n                ...state,\r\n                settings: {\r\n                    ...state.settings,\r\n                    sensorType: action.payload.sensorType,\r\n                }\r\n            };\r\n        case \"CALIBRATION1\":\r\n            return {\r\n                ...state,\r\n                calibration: {\r\n                    ...state.calibration,\r\n                    measurement1: action.payload.measurement\r\n                }\r\n            };\r\n        case \"CALIBRATION2\":\r\n            return {\r\n                ...state,\r\n                calibration: {\r\n                    ...state.calibration,\r\n                    measurement2: action.payload.measurement\r\n                }\r\n            };\r\n        case \"INERTIA\":\r\n            return {\r\n                ...state,\r\n                calibration: {\r\n                    ...state.calibration,\r\n                    inertia: action.payload.inertia\r\n                }\r\n            };\r\n        case \"EVALUATION\":\r\n            return {\r\n                ...state,\r\n                evaluation: {\r\n                    measurements: [...state.evaluation.measurements, action.payload.measurement]\r\n                }\r\n            };\r\n        case \"MEASURING\":\r\n            return {\r\n                ...state,\r\n                measuring: !state.measuring\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        position: \"fixed\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        backgroundColor: \"rgba(0, 0, 0, 0.2)\",\r\n        zIndex: 1300,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        overflow: \"hidden\",\r\n        transform: \"translateX(-50%) translateY(-50%) scaleX(0) scaleY(0)\",\r\n        transition: \"all 0.2s ease\",\r\n        opacity: 0,\r\n    },\r\n    active: {\r\n        transform: \"translateX(-50%) translateY(-50%) scaleX(1) scaleY(1)\",\r\n        opacity: 1\r\n    }\r\n}));\r\n\r\nconst Loader = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const measuring = useSelector(state => state.measuring);\r\n    const duration = useSelector(state => state.settings.duration + state.settings.delay);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        window.setTimeout(function() {\r\n            if(measuring) {\r\n                dispatch({type: \"MEASURING\"});\r\n            }\r\n        }, duration * 1000);\r\n\r\n        return (window.clearTimeout(function() {\r\n            if(measuring) {\r\n                dispatch({type: \"MEASURING\"});\r\n            }\r\n        }));\r\n    });\r\n\r\n    return (\r\n        <div className={classes.root + \" \" + (measuring ? classes.active : \"\")}>\r\n            <CircularProgress color={\"secondary\"} size={100} thickness={2} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CheckSupport} from \"../Functions/CheckSupport\";\r\n\r\nconst Unsupported = (props) => {\r\n    const supported = useSelector(state => state.availableSensors.gyroscope || state.availableSensors.accelerometer);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const setSupportLevel = (support) => {\r\n        dispatch({type: \"AVAILABLE_SENSORS\", payload: support});\r\n        if(support.gyroscope) {\r\n            dispatch({type: \"SENSORTYPE\", payload: {sensorType: 'gyroscope'}});\r\n            return;\r\n        }\r\n        if(support.accelerometer) {\r\n            dispatch({type: \"SENSORTYPE\", payload: {sensorType: 'accelerometer'}});\r\n        }\r\n    };\r\n\r\n    CheckSupport(setSupportLevel);\r\n\r\n    return (\r\n        <Modal open={!supported} style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\r\n            <div style={{backgroundColor: \"white\", width: \"70%\", padding: \"10px\", borderRadius: 5}}>\r\n                <Typography>Ihr Gerät / Browser wird leider nicht unterstützt!</Typography>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default Unsupported;\r\n","const CheckSupport = (handle) => {\r\n    const check = (event) => {\r\n        handle({\r\n            gyroscope: event.rotationRate.alpha !== null,\r\n            accelerometer: event.acceleration.x !== null\r\n        });\r\n        window.removeEventListener('devicemotion', check);\r\n    };\r\n\r\n    window.addEventListener('devicemotion', check);\r\n};\r\n\r\nexport {CheckSupport};\r\n","import React from 'react';\nimport NavBar from \"./Components/NavBar\";\nimport { MemoryRouter as Router, Route } from \"react-router-dom\";\nimport Settings from './Components/Settings';\nimport Calibration from './Components/Calibration';\nimport Evaluation from './Components/Evaluation';\nimport Landing from './Components/Landing';\nimport Container from \"@material-ui/core/Container\";\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport appReducer from './Reducers/appReducer';\nimport Loader from \"./Components/Loader\";\nimport {AnimatedSwitch, spring} from \"react-router-transition\";\nimport Unsupported from \"./Components/Unsupported\";\n\nconst store = createStore(appReducer);\n\nfunction mapStyles(styles) {\n    return {\n        opacity: styles.opacity,\n        transform: `scale(${styles.scale})`,\n    };\n}\n\n\nfunction bounce(val) {\n    return spring(val, {\n        stiffness: 500,\n        damping: 20,\n    });\n}\n\nconst bounceTransition = {\n    // start in a transparent, upscaled state\n    atEnter: {\n        opacity: 0,\n        scale: 1.2,\n    },\n    // leave in a transparent, downscaled state\n    atLeave: {\n        opacity: bounce(0),\n        scale: bounce(0.8),\n    },\n    // and rest at an opaque, normally-scaled state\n    atActive: {\n        opacity: bounce(1),\n        scale: bounce(1),\n    },\n};\n\nconst App = () => {\n    return (\n        <Router>\n            <div style={{display: \"flex\", flexDirection: \"column\", minHeight: \"100vh\"}}>\n                <Provider store={store}>\n                    <NavBar />\n                    <Loader />\n                    <Unsupported />\n                    <Container style={{paddingTop: \"18px\"}}>\n                        <AnimatedSwitch\n                            atEnter={bounceTransition.atEnter}\n                            atLeave={bounceTransition.atLeave}\n                            atActive={bounceTransition.atActive}\n                            mapStyles={mapStyles}\n                            className='switch-wrapper'\n                        >\n                          <Route path={'/'} exact component={Landing} />\n                          <Route path={'/settings'} exact component={Settings} />\n                          <Route path={'/calibration'} exact component={Calibration} />\n                          <Route path={'/evaluation'} exact component={Evaluation} />\n                        </AnimatedSwitch>\n                    </Container>\n                </Provider>\n            </div>\n        </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}