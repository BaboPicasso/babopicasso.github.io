{"version":3,"sources":["components/Providers/FireBaseProvider.js","components/Functions/isPropertyDefined.js","components/Providers/ThemeProvider.js","components/Providers/index.jsx","components/Routes/index.jsx","components/App.js","serviceWorker.js","index.js"],"names":["FireBaseContext","React","createContext","FireBaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","useFieldValue","FireBaseApp","firestore","FieldValue","useFireBaseAuth","useContext","auth","useIsAuthenticated","useState","authenticated","setAuthenticated","FireBaseAuth","useEffect","unsubscribe","onAuthStateChanged","user","useIsAdmin","userInfo","useUserInfo","isPropertyDefined","setUserInfo","currentUser","uid","email","Firestore","useFireBaseFirestore","Object","entries","length","constructor","collection","doc","get","then","state","data","useSignOut","password","signOut","useSignInWithEmailAndPassword","signInWithEmailAndPassword","useCreateWithEmailAndPassword","createUserWithEmailAndPassword","FireBaseProvider","children","FireBase","initializeApp","GetOptions","source","enablePersistence","catch","err","code","console","log","Provider","value","object","properties","returnValue","temp","i","Theme","ThemeContext","ThemeProvider","Providers","Protected","lazy","Unprotected","Routes","Suspense","fallback","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1a930bf.chunk.js","sourcesContent":["import React from 'react';\r\nimport FireBaseApp from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport isPropertyDefined from \"../Functions/isPropertyDefined\";\r\n\r\nexport const FireBaseContext = React.createContext();\r\n\r\nconst FireBaseConfig = {\r\n    apiKey: \"AIzaSyA4Mf8JOEMj97B8aGW-73GR_UFD2iZ0VRg\",\r\n    authDomain: \"elearning-d6924.firebaseapp.com\",\r\n    databaseURL: \"https://elearning-d6924.firebaseio.com\",\r\n    projectId: \"elearning-d6924\",\r\n    storageBucket: \"elearning-d6924.appspot.com\",\r\n    messagingSenderId: \"368017147882\",\r\n    appId: \"1:368017147882:web:1494e778169181aabdd493\",\r\n    measurementId: \"G-GQRZCW39GH\",\r\n};\r\n\r\nexport const useFieldValue = () => {\r\n    return FireBaseApp.firestore.FieldValue;\r\n};\r\n\r\nexport const useFieldPath = () => {\r\n    return FireBaseApp.firestore.FieldPath;\r\n};\r\n\r\nexport const useFireBase = () => {\r\n    return React.useContext(FireBaseContext);\r\n};\r\n\r\nexport const useFireBaseAuth = () => {\r\n    return React.useContext(FireBaseContext).auth();\r\n};\r\n\r\nexport const useIsAuthenticated = () => {\r\n    const [authenticated, setAuthenticated] = React.useState(false);\r\n    const FireBaseAuth = useFireBaseAuth();\r\n\r\n    React.useEffect(() => {\r\n        const unsubscribe = FireBaseAuth.onAuthStateChanged(user => {\r\n            if(!!user === authenticated) return;\r\n            setAuthenticated(!!user);\r\n        });\r\n\r\n        return () => unsubscribe();\r\n    });\r\n\r\n    return authenticated;\r\n};\r\n\r\nexport const useIsAdmin = () => {\r\n    const userInfo = useUserInfo();\r\n\r\n    return isPropertyDefined(userInfo, ['roles', 'admin'], false);\r\n};\r\n\r\nexport const useUserInfo = () => {\r\n    const [userInfo, setUserInfo] = React.useState({});\r\n\r\n    const FireBaseAuth = useFireBaseAuth();\r\n    const {uid, email} = FireBaseAuth.currentUser;\r\n\r\n    const Firestore = useFireBaseFirestore();\r\n\r\n    if(Object.entries(userInfo).length === 0 && userInfo.constructor === Object) {\r\n        Firestore.collection('Users').doc(uid).get().then(\r\n            (doc) => {\r\n                setUserInfo(state => ({...state, ...(doc.data()), uid, email}))\r\n            }\r\n        );\r\n    }\r\n\r\n    return userInfo;\r\n};\r\n\r\nexport const useSignOut = () => {\r\n    const FireBaseAuth = useFireBaseAuth();\r\n\r\n    return (email, password) => FireBaseAuth.signOut();\r\n};\r\n\r\nexport const useSignInWithEmailAndPassword = () => {\r\n    const FireBaseAuth = useFireBaseAuth();\r\n\r\n    return (email, password) => FireBaseAuth.signInWithEmailAndPassword(email, password);\r\n};\r\n\r\nexport const useCreateWithEmailAndPassword = () => {\r\n    const FireBaseAuth = useFireBaseAuth();\r\n\r\n    return (email, password) => FireBaseAuth.createUserWithEmailAndPassword(email, password);\r\n};\r\n\r\nexport const useFireBaseFirestore = () => {\r\n    const firestore = React.useContext(FireBaseContext).firestore();\r\n\r\n    return firestore;\r\n};\r\n\r\nconst FireBaseProvider = ({children}) => {\r\n    const FireBase = FireBaseApp.initializeApp(FireBaseConfig);\r\n\r\n    FireBase.firestore().GetOptions = {source: 'cache'}\r\n\r\n    FireBase.firestore().enablePersistence().catch(err => {\r\n        if(err.code === 'failed-precondition') {\r\n            console.log('Multiple tabs openened.');\r\n        }\r\n        if(err.code === 'unimplemented') {\r\n            console.log('Current browser does not support persistence.');\r\n        }\r\n    }).then(() => console.log('Success'));\r\n\r\n    return (\r\n        <FireBaseContext.Provider value={FireBase}>\r\n            {children}\r\n        </FireBaseContext.Provider>\r\n    )\r\n};\r\n\r\nexport default FireBaseProvider;","//If Properties are defined returns the object property if not returns returnValue\r\n\r\nconst isPropertyDefined = (object, properties = [], returnValue = {}) => {\r\n    let temp = object;\r\n\r\n    if(properties.length === 0 && object.constructor === Object && Object.entries(object).length === 0) return returnValue;\r\n\r\n    for(let i = 0; i < properties.length; i++) {\r\n        if(temp[properties[i]]) {\r\n            temp = temp[properties[i]];\r\n        } else {\r\n            return returnValue;\r\n        }\r\n    }\r\n\r\n    return temp;\r\n};\r\n\r\nexport default isPropertyDefined;","import React from 'react';\r\n\r\nconst Theme = {\r\n\r\n};\r\n\r\nconst ThemeContext = React.createContext();\r\n\r\nexport const useTheme = () => {\r\n    return React.useContext(ThemeContext);\r\n};\r\n\r\nconst ThemeProvider = ({children}) => {\r\n    return (\r\n        <ThemeContext.Provider value={Theme}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    )\r\n};\r\n\r\nexport default ThemeProvider;","import React from 'react';\r\nimport FireBaseProvider from \"./FireBaseProvider\";\r\nimport ThemeProvider from \"./ThemeProvider\";\r\n\r\nconst Providers = ({children}) => {\r\n    return (\r\n        <FireBaseProvider>\r\n            <ThemeProvider>\r\n                {children}\r\n            </ThemeProvider>\r\n        </FireBaseProvider>\r\n    )\r\n};\r\n\r\nexport default Providers;","import React from 'react';\r\nimport {useIsAuthenticated, useSignOut} from \"../Providers/FireBaseProvider\";\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\n\r\nconst Protected = React.lazy(() => import(\"./Protected\"));\r\nconst Unprotected = React.lazy(() => import(\"./Unprotected\"));\r\n\r\nconst Routes = () => {\r\n    const authenticated = useIsAuthenticated();\r\n\r\n\r\n    return (\r\n        <React.Suspense fallback={null}>\r\n            {authenticated ? (\r\n                <Router>\r\n                    <Protected />\r\n                </Router>\r\n                )\r\n                : <Unprotected />}\r\n        </React.Suspense>\r\n    );\r\n};\r\n\r\nexport default Routes;","import React from 'react';\r\nimport Providers from \"./Providers\";\r\nimport Routes from \"./Routes\";\r\n\r\nfunction App() {\r\n    return (\r\n        <Providers>\r\n            <Routes />\r\n        </Providers>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}